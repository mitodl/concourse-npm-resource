#!/bin/bash

set -e
set -o pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname "$0")/common.sh

cd "$1"

publish_result_file=$(mktemp $TMPDIR/publish-result.XXXXXX)
publish_error_file=$(mktemp $TMPDIR/publish-error.XXXXXX)

# Read inputs
payload="$(cat <&0)"

package_path=$(jq -r '.params.path // ""' <<< $payload)

if [ -z "$package_path" ]; then
  echo "invalid payload (missing path)"
  exit 1
fi

version=$(jq -r '.params.version // ""' <<< $payload)
if [ -n "$version" ]; then
  if [ ! -f "$1/$version" ]; then
    echo "unable to find version file '$version'"
    exit 1
  fi
  version_string="$(cat "$1/$version")"
fi

# Prepare
setup_resource
echo "Resource setup successful."

cd "$1/$package_path"

manifestName="$(jq -r .name < package.json)"

if [ ! "@$scope/$package" = "$manifestName" ] && [ ! "$package" = "$manifestName" ]; then
  echo "package name in resource definition and package.json don't match, $package vs $manifestName"
  exit 1
fi

# optional version override through "params: {version: path/to/version/file}"
[ -n "$version_string" ] \
&& npm version "$version_string" \
|| version_string=$(jq -r .version < package.json)

args=""
# optional publish package with '--access public' through "params: {public: true}"
public=$(jq -r '.params.public' <<< $payload)
if [ "$public" = true ]; then
  args=" --access public"
fi

PACKAGE_MANAGER = $(jq -r '.params.package_manager // "npm"' <<< $payload)
echo "Installing dependencies..."
$PACKAGE_MANAGER install

echo "Publishing..."
npm publish $args \
> $publish_result_file \
2> $publish_result_file \
&& publish_result_code=$? \
|| publish_result_code=$?

if [ $publish_result_code -ne 0 ]; then
  cat $publish_result_file
  exit 1
fi

echo "{\"version\":{\"version\":\"$version_string\"}}" \
| jq . \
>&3
